# -*- coding: utf-8 -*-
"""Journal_Entry_Model_MongoDB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YO3PtiPnZuvye_2T9HALnyHj4O7ptlyB
"""

!pip install flask flask-ngrok flask-cors pymongo dnspython transformers tensorflow pyngrok

!pip install "pymongo[srv]"

!ngrok authtoken 2spbWZszlYSTSI8KbUfE16df8XI_2ddKZWvBBquWLvKhWjU6E

# Should change here according to from where importing
from google.colab import drive
drive.mount('/content/drive')

import zipfile

# Paths to zip files in Google Drive
suicide_model_zip = "/content/drive/MyDrive/bert_suicide_model.zip"
emotion_model_zip = "/content/drive/MyDrive/bert_emotion_model.zip"
tokenizer_zip = "/content/drive/MyDrive/tokenizer (1).zip"

# Unzip models and tokenizer
unzip_paths = {
    suicide_model_zip: "/content/bert_suicide_model",
    emotion_model_zip: "/content/bert_emotion_model",
    tokenizer_zip: "/content/tokenizer (1)"
}

for zip_path, extract_path in unzip_paths.items():
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_path)

print("Models and tokenizer extracted successfully!")

import tensorflow as tf
from transformers import AutoTokenizer

# Load models
suicide_model = tf.saved_model.load("/content/bert_suicide_model")
emotion_model = tf.saved_model.load("/content/bert_emotion_model")

# Load tokenizer
tokenizer = AutoTokenizer.from_pretrained("/content/tokenizer (1)")

print("Models and tokenizer loaded successfully!")

from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi

uri = "mongodb+srv://Vinethma:2003Asmi15@cluster0.xrhve.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"

# Create a new client and connect to the server
client = MongoClient(uri, server_api=ServerApi('1'))

# Send a ping to confirm a successful connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)

from flask import Flask, request, jsonify
from flask_cors import CORS
from pyngrok import ngrok
from pymongo import MongoClient
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
from datetime import datetime


# Connect to MongoDB
MONGO_URI = "mongodb+srv://Vinethma:2003Asmi15@cluster0.xrhve.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(MONGO_URI)
db = client["HopeBridge"]   # Database name
collection = db["Journal Entries"]   # Collection name

# Start Flask app
app = Flask(__name__)
CORS(app)  # Fix CORS issue

# Expose Flask app via ngrok
public_url = ngrok.connect(5000).public_url
print(f" Public URL: {public_url}")

# Suicide and Emotion Detection
def detect_suicide_and_emotion(text):
    suicide_label_mapping = {0: "non-suicide", 1: "suicide"}
    emotion_label_mapping = {0: "sadness", 1: "joy", 2: "love", 3: "anger", 4: "fear", 5: "surprise"}
    risk_levels = {"sadness": "Medium Risk", "anger": "Medium Risk", "fear": "Medium Risk"}

    try:
        # Predict Suicide Risk
        inputs_suicide = tokenizer([text], padding="max_length", truncation=True, max_length=128, return_tensors="tf")
        inputs_suicide = {key: tf.cast(value, tf.int64) for key, value in inputs_suicide.items()}
        infer_suicide = suicide_model.signatures['serving_default']
        suicide_outputs = infer_suicide(**inputs_suicide)
        suicide_prediction = tf.argmax(suicide_outputs['output_1'], axis=1).numpy()[0]
        suicide_label = suicide_label_mapping[suicide_prediction]

    except Exception as e:
        return {"error": f"Error in suicide detection: {str(e)}"}

    # Get current date and time
    current_date = datetime.now().strftime("%Y-%m-%d")

    if suicide_label == "suicide":
        result = {"text": text, "suicide_risk": "High Risk", "emotion": "Not Analyzed", "date": current_date}
        collection.insert_one(result)  # Save to MongoDB
        return result

    # Predict Emotion
    try:
        inputs_emotion = tokenizer([text], padding="max_length", truncation=True, max_length=87, return_tensors="tf")
        inputs_emotion = {key: tf.cast(value, tf.int64) for key, value in inputs_emotion.items()}
        infer_emotion = emotion_model.signatures['serving_default']
        emotion_outputs = infer_emotion(**inputs_emotion)
        emotion_prediction = tf.argmax(emotion_outputs['output_1'], axis=1).numpy()[0]
        emotion_label = emotion_label_mapping[emotion_prediction]

    except Exception as e:
        return {"error": f"Error in emotion detection: {str(e)}"}

    risk_level = risk_levels.get(emotion_label, "Low Risk")
    result = {"text": text, "emotion": emotion_label, "suicide_risk": risk_level, "date": current_date}

    # Save to MongoDB
    collection.insert_one(result)

    return result


# API Endpoint to Analyze Journal Entry
@app.route("/analyze", methods=["POST"])
def analyze():
    try:
        data = request.get_json()
        text = data.get("text", "").strip()

        if not text:
            return jsonify({"error": "Text input is required!"}), 400

        result = detect_suicide_and_emotion(text)
        return jsonify(result)

    except Exception as e:
        return jsonify({"error": f"Internal Server Error: {str(e)}"}), 500

if __name__ == "__main__":
    app.run(port=5000)